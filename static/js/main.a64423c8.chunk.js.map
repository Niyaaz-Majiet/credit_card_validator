{"version":3,"sources":["Utility.js","components/add_account_screen/AddCreditCardScreen.js","components/auto_complete_widget/AutoCompleteWidget.js","components/banned_countries_screen/BannedCountriesScreen.js","components/view_accounts_screen/ViewAccountsScreen.js","components/pop_up_base/PopUpBase.js","components/home_screen/Home.js","App.js","serviceWorker.js","index.js"],"names":["valid","require","getBannedCountries","JSON","parse","sessionStorage","getItem","getSavedAccounts","setSavedAccounts","savedAccounts","setItem","stringify","checkIfAccountExists","accountNumber","isDuplicate","forEach","card","number","retrieveAccountAndCardInfo","creditCardNumber","Promise","resolve","fetch","substring","method","headers","Accept","then","response","json","data","catch","error","AddCreditCardScreen","useState","updateAccontNumber","onClick","a","isValidData","isValid","retrivedCardInfo","length","alert","checkIfSelectedBanned","country","alpha2","addCreditCard","cardInfo","countryName","name","banckName","bank","currency","push","isSelectedBanned","bannedCountries","alpha2Code","id","className","placeholder","onChange","$event","target","value","trim","AutoCompleteWidget","props","type","suggestionState","userInput","showSuggestions","filteredSuggestions","map","suggestion","index","key","BannedCountriesScreen","countries","updateCountries","updateBannedCountries","updateSuggestionState","useEffect","setBannedCountries","result","proccessedData","rawCountriesArray","proccesedArray","proccessRawCountriesArray","suggestions","currentTarget","filter","toLowerCase","indexOf","innerText","isValidCountry","indexOfSelectedCountry","currentUserInput","i","includes","addToBanned","newArray","currentCountry","removeItem","ViewAccountsScreen","updateSavedAccounts","accountData","account","PopUpBase","handleClose","content","Home","isAddPopUpOpen","setIsAddOpen","isViewPopUpOpen","setIsViewOpen","isBannedPopUpOpen","setIsBannedOpen","togglePopUpOff","togglePopUps","popUpName","getAttribute","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a64423c8.chunk.js","sourcesContent":["var valid = require(\"card-validator\");\r\n\r\nexport const proccessRawCountriesArray = (rawCountriesArray) => {\r\n  let proccesedArray = [];\r\n\r\n  [...rawCountriesArray].forEach((country) => {\r\n    proccesedArray.push({\r\n      name: country.name,\r\n      alpha2Code: country.alpha2Code,\r\n    });\r\n  });\r\n\r\n  return proccesedArray;\r\n};\r\n\r\nexport const getBannedCountries = () => {\r\n  return JSON.parse(sessionStorage.getItem(\"banned_countries\")) || [];\r\n};\r\n\r\nexport const setBannedCountries = (bannedCountries) => {\r\n  sessionStorage.setItem(\"banned_countries\", JSON.stringify(bannedCountries));\r\n};\r\n\r\nexport const getSavedAccounts = () => {\r\n  return JSON.parse(sessionStorage.getItem(\"saved_accounts\")) || [];\r\n};\r\n\r\nexport const setSavedAccounts = (savedAccounts) => {\r\n  sessionStorage.setItem(\"saved_accounts\", JSON.stringify(savedAccounts));\r\n};\r\n\r\nexport const validateAccountAndReturnData = (creditCardNumber) => {\r\n  let checkCardDetails = valid.number(creditCardNumber);\r\n  return {\r\n    isValid: checkCardDetails.isValid,\r\n  };\r\n};\r\n\r\nexport const checkIfAccountExists = (accountNumber) => {\r\n  let isDuplicate = false;\r\n\r\n  let saved_cards = JSON.parse(sessionStorage.getItem(\"saved_accounts\")) || [];\r\n\r\n  saved_cards.forEach((card) => {\r\n    if (card.number === accountNumber) {\r\n      isDuplicate = true;\r\n    }\r\n  });\r\n\r\n  return isDuplicate;\r\n};\r\n\r\nexport const retrieveAccountAndCardInfo = (creditCardNumber) => {\r\n  return new Promise((resolve) => {\r\n    fetch(\r\n      `http://localhost:3002/api/binlist-details/${creditCardNumber.substring(\r\n        0,\r\n        8\r\n      )}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        resolve(data);\r\n      })\r\n      .catch((error) => {\r\n        resolve(null);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getCountries = () => {\r\n  return new Promise((resolve) => {\r\n    fetch(\"https://restcountries.eu/rest/v2/all\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        resolve(data);\r\n      })\r\n      .catch((error) => {\r\n        resolve(null);\r\n      });\r\n  });\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./AddCreditCardScreen.css\";\r\nimport {\r\n  validateAccountAndReturnData,\r\n  retrieveAccountAndCardInfo,\r\n  checkIfAccountExists,\r\n  getBannedCountries,\r\n  getSavedAccounts,\r\n  setSavedAccounts,\r\n} from \"./../../Utility\";\r\n\r\nconst AddCreditCardScreen = () => {\r\n  const [accountNumber, updateAccontNumber] = useState(\"\");\r\n\r\n  const onClick = async () => {\r\n    let isValidData = validateAccountAndReturnData(accountNumber);\r\n    let retrivedCardInfo = await retrieveAccountAndCardInfo(accountNumber);\r\n    if (retrivedCardInfo) {\r\n      if (accountNumber.length < 13) {\r\n        alert(\"Invalid Credit Card Number\");\r\n      } else {\r\n        if (isValidData.isValid) {\r\n          let isDuplicate = checkIfAccountExists(accountNumber);\r\n          if (isDuplicate) {\r\n            alert(\"Account Has Already Been Added\");\r\n          } else {\r\n            let isSelectedBanned = checkIfSelectedBanned(\r\n              retrivedCardInfo.country.alpha2\r\n            );\r\n\r\n            if (isSelectedBanned) {\r\n              alert(\"Card Belongs To a Banned Country\");\r\n            } else {\r\n              addCreditCard(retrivedCardInfo);\r\n              updateAccontNumber(\"\");\r\n            }\r\n          }\r\n        } else {\r\n          alert(\"Account Number Not Valid\");\r\n        }\r\n      }\r\n    } else {\r\n      alert(\"Could Not Retrieve Card Info\");\r\n    }\r\n  };\r\n\r\n  const onChange = ($event) => updateAccontNumber($event.target.value.trim());\r\n\r\n  const addCreditCard = (retrivedCardInfo) => {\r\n    let cardInfo = {\r\n      countryName: retrivedCardInfo.country.name,\r\n      banckName: retrivedCardInfo.bank.name,\r\n      alpha2: retrivedCardInfo.country.alpha2,\r\n      currency: retrivedCardInfo.country.currency,\r\n      number: accountNumber,\r\n    };\r\n\r\n    let savedAccounts = getSavedAccounts();\r\n\r\n    savedAccounts.push(cardInfo);\r\n\r\n    setSavedAccounts(savedAccounts);\r\n\r\n    alert(\"Account Successfully Added\");\r\n  };\r\n\r\n  const checkIfSelectedBanned = (alpha2) => {\r\n    let isSelectedBanned = false;\r\n    let bannedCountries = getBannedCountries();\r\n    if (bannedCountries) {\r\n      bannedCountries.forEach((country) => {\r\n        if (country.alpha2Code === alpha2) {\r\n          isSelectedBanned = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    return isSelectedBanned;\r\n  };\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <h1>ADD CREDIT CARD NUMBER</h1>\r\n      <div id=\"input_form\" className=\"column\">\r\n        <input\r\n          placeholder=\"Enter credit card number...\"\r\n          onChange={($event) => onChange($event)}\r\n          value={accountNumber}\r\n        />\r\n        <button onClick={() => onClick()}>ADD</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCreditCardScreen;\r\n","import React from \"react\";\r\nimport \"./AutoCompleteWidget.css\";\r\n\r\nconst AutoCompleteWidget = (props) => {\r\n  return (\r\n    <div id=\"container\">\r\n      <input\r\n        className=\"cityInput\"\r\n        type=\"text\"\r\n        onChange={props.onChange}\r\n        value={props.suggestionState.userInput}\r\n      />\r\n\r\n      {props.suggestionState.showSuggestions &&\r\n      props.suggestionState.userInput &&\r\n      props.suggestionState.filteredSuggestions.length > 0 ? (\r\n        <ul id=\"suggestions\">\r\n          {props.suggestionState.filteredSuggestions.map(\r\n            (suggestion, index) => {\r\n              return (\r\n                <li className=\"list_items\" key={index} onClick={props.onClick}>\r\n                  {suggestion.name}\r\n                </li>\r\n              );\r\n            }\r\n          )}\r\n        </ul>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AutoCompleteWidget;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AutoCompleteWidget from \"../auto_complete_widget/AutoCompleteWidget\";\r\nimport {\r\n  proccessRawCountriesArray,\r\n  getCountries,\r\n  getBannedCountries,\r\n  setBannedCountries,\r\n} from \"./../../Utility\";\r\nimport \"./BannedCountriesScreen.css\";\r\n\r\nconst BannedCountriesScreen = () => {\r\n  const [countries, updateCountries] = useState([]);\r\n  const [bannedCountries, updateBannedCountries] = useState(\r\n    getBannedCountries()\r\n  );\r\n  const [suggestionState, updateSuggestionState] = useState({\r\n    filteredSuggestions: [],\r\n    showSuggestions: false,\r\n    userInput: \"\",\r\n  });\r\n\r\n  const onChange = ($event) => {\r\n    const suggestions = countries;\r\n    const userInput = $event.currentTarget.value;\r\n\r\n    const filteredSuggestions = suggestions.filter(\r\n      (suggestion) =>\r\n        suggestion.name.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    updateSuggestionState({\r\n      filteredSuggestions,\r\n      showSuggestions: true,\r\n      userInput: $event.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  const onClick = ($event) => {\r\n    updateSuggestionState({\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: $event.currentTarget.innerText,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setBannedCountries(bannedCountries);\r\n  }, [bannedCountries]);\r\n\r\n  useEffect(() => {\r\n    getCountries().then((result) => {\r\n      if (result) {\r\n        let proccessedData = proccessRawCountriesArray(result);\r\n        updateCountries(proccessedData);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const removeItem = (country) => {\r\n    let newArray = bannedCountries.filter(\r\n      (currentCountry) => currentCountry.name !== country\r\n    );\r\n    updateBannedCountries(newArray);\r\n  };\r\n\r\n  const addToBanned = () => {\r\n    if (suggestionState.userInput.length > 0) {\r\n      let isValidCountry = false;\r\n      let indexOfSelectedCountry = null;\r\n      let currentUserInput = suggestionState.userInput.toLowerCase().trim();\r\n      for (let i = 0; i < countries.length; i++) {\r\n        let currentCompany = countries[i].name.toLowerCase();\r\n\r\n        if (currentCompany === currentUserInput) {\r\n          isValidCountry = true;\r\n          indexOfSelectedCountry = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (isValidCountry) {\r\n        if (bannedCountries.includes(countries[indexOfSelectedCountry])) {\r\n          alert(\"Country Already Banned\");\r\n        } else {\r\n          updateBannedCountries([\r\n            ...bannedCountries,\r\n            countries[indexOfSelectedCountry],\r\n          ]);\r\n        }\r\n      } else {\r\n        alert(\"Country Not Found ...\");\r\n      }\r\n\r\n      updateSuggestionState({ userInput: \"\" });\r\n    } else {\r\n      alert(\"Please enter a city name ...\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <h1>BANNED COUNTRIES</h1>\r\n      <div id=\"banned_form\" className=\"column\">\r\n        <AutoCompleteWidget\r\n          suggestions={countries}\r\n          onChange={($event) => onChange($event)}\r\n          onClick={($event) => onClick($event)}\r\n          suggestionState={suggestionState}\r\n        />\r\n        <button onClick={() => addToBanned()}>Add to banned</button>\r\n      </div>\r\n\r\n      {bannedCountries && bannedCountries.length > 0 ? (\r\n        <div id=\"list_wrapper\">\r\n          {bannedCountries.map((country, index) => {\r\n            return (\r\n              <div key={index}>\r\n                {country.name}\r\n                <button id=\"alpha\" onClick={() => removeItem(country.name)}>\r\n                  X\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div id=\"no_banned_accounts_display\">\r\n          <h1 id=\"no_banned_accounts_display_message\">\r\n            No countries have been banned\r\n          </h1>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BannedCountriesScreen;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getSavedAccounts, setSavedAccounts } from \"../../Utility\";\r\nimport \"./ViewAccountsScreen.css\";\r\n\r\nconst ViewAccountsScreen = () => {\r\n  const [savedAccounts, updateSavedAccounts] = useState(getSavedAccounts());\r\n\r\n  useEffect(() => {\r\n    setSavedAccounts(savedAccounts);\r\n  }, [savedAccounts]);\r\n\r\n  const removeItem = (accountNumber) => {\r\n    let newArray = savedAccounts.filter((account) => {\r\n      return account.number !== accountNumber;\r\n    });\r\n    updateSavedAccounts(newArray);\r\n  };\r\n\r\n  return (\r\n    <div className=\"account_container\">\r\n      {savedAccounts && savedAccounts.length > 0 ? (\r\n        <div>\r\n          <h1>SAVED ACCOUNTS</h1>\r\n          {savedAccounts.map((accountData, index) => {\r\n            return (\r\n              <div key={index} className=\"account_item_col\">\r\n                <div className=\"account_items\">\r\n                  <h5 id=\"account_number\">\r\n                    Account Number : {accountData.number}\r\n                  </h5>\r\n                  <br />\r\n                  <button\r\n                    id=\"btnRemove\"\r\n                    onClick={() => removeItem(accountData.number)}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div>No Saved Accounts</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewAccountsScreen;\r\n","import React from \"react\";\r\nimport \"./PopUpBase.css\";\r\n\r\nconst PopUpBase = (props) => {\r\n  return (\r\n    <div className=\"popup-box\">\r\n      <div className=\"box\">\r\n        <span className=\"close-icon\" onClick={props.handleClose}>\r\n          x\r\n        </span>\r\n        {props.content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopUpBase;\r\n","import React, { useState } from \"react\";\r\nimport AddCreditCardScreen from \"../add_account_screen/AddCreditCardScreen\";\r\nimport BannedCountriesScreen from \"../banned_countries_screen/BannedCountriesScreen\";\r\nimport ViewAccountsScreen from \"../view_accounts_screen/ViewAccountsScreen\";\r\nimport PopUpBase from \"../pop_up_base/PopUpBase\";\r\nimport \"./Home.css\";\r\n\r\nconst Home = () => {\r\n  const [isAddPopUpOpen, setIsAddOpen] = useState(false);\r\n  const [isViewPopUpOpen, setIsViewOpen] = useState(false);\r\n  const [isBannedPopUpOpen, setIsBannedOpen] = useState(false);\r\n\r\n  const togglePopUpOff = () => {\r\n    if (isAddPopUpOpen) {\r\n      setIsAddOpen(false);\r\n    } else if (isViewPopUpOpen) {\r\n      setIsViewOpen(false);\r\n    } else if (isBannedPopUpOpen) {\r\n      setIsBannedOpen(false);\r\n    }\r\n  };\r\n\r\n  const togglePopUps = ($event) => {\r\n    let popUpName = $event.target.getAttribute(\"name\");\r\n\r\n    if (popUpName === \"add\") {\r\n      setIsAddOpen(!isAddPopUpOpen);\r\n    } else if (popUpName === \"view\") {\r\n      setIsViewOpen(!isViewPopUpOpen);\r\n    } else if (popUpName === \"banned\") {\r\n      setIsBannedOpen(!isBannedPopUpOpen);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"action_buttons\">\r\n        <button\r\n          className=\"btn\"\r\n          name=\"add\"\r\n          onClick={($event) => togglePopUps($event)}\r\n        >\r\n          ADD\r\n        </button>\r\n        {isAddPopUpOpen && (\r\n          <PopUpBase\r\n            content={<AddCreditCardScreen />}\r\n            handleClose={togglePopUpOff}\r\n          />\r\n        )}\r\n\r\n        <button\r\n          className=\"btn\"\r\n          name=\"view\"\r\n          onClick={($event) => togglePopUps($event)}\r\n        >\r\n          VIEW\r\n        </button>\r\n        {isViewPopUpOpen && (\r\n          <PopUpBase\r\n            content={<ViewAccountsScreen />}\r\n            handleClose={togglePopUpOff}\r\n          />\r\n        )}\r\n\r\n        <button\r\n          className=\"btn\"\r\n          name=\"banned\"\r\n          onClick={($event) => togglePopUps($event)}\r\n        >\r\n          BANNED\r\n        </button>\r\n        {isBannedPopUpOpen && (\r\n          <PopUpBase\r\n            content={<BannedCountriesScreen />}\r\n            handleClose={togglePopUpOff}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/home_screen/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}